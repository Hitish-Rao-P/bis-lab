import numpy as np


def rastrigin(x):

    A = 10

    return A * len(x) + np.sum(x**2 - A * np.cos(2 * np.pi * x))


# Parameters

POP_SIZE = 30

GENE_LENGTH = 5  # number of dimensions

MUTATION_RATE = 0.1

CROSSOVER_RATE = 0.7

GENERATIONS = 3

VALUE_RANGE = (-5.12, 5.12)

# Step 1: Initialize population


def initialize_population():

    return np.random.uniform(VALUE_RANGE[0], VALUE_RANGE[1],
                             (POP_SIZE, GENE_LENGTH))


# Step 2: Evaluate fitness (lower is better)


def evaluate_fitness(pop):

    return np.array([rastrigin(ind) for ind in pop])


# Step 3: Selection - tournament


def select(pop, fitness, k=3):

    selected = []

    for _ in range(len(pop)):

        idx = np.random.choice(len(pop), k)

        winner = pop[idx[np.argmin(fitness[idx])]]

        selected.append(winner)

    return np.array(selected)


# Step 4: Crossover


def crossover(parents):

    offspring = []

    for i in range(0, len(parents), 2):

        p1, p2 = parents[i], parents[(i + 1) % len(parents)]

        if np.random.rand() < CROSSOVER_RATE:

            point = np.random.randint(1, GENE_LENGTH)

            c1 = np.concatenate((p1[:point], p2[point:]))

            c2 = np.concatenate((p2[:point], p1[point:]))

        else:

            c1, c2 = p1.copy(), p2.copy()

        offspring.extend([c1, c2])

    return np.array(offspring)


# Step 5: Mutation


def mutate(pop):

    for individual in pop:

        for i in range(GENE_LENGTH):

            if np.random.rand() < MUTATION_RATE:

                individual[i] = np.random.uniform(VALUE_RANGE[0],
                                                  VALUE_RANGE[1])

    return pop


# Step 6: GEA main loop


def gene_expression_algorithm():

    pop = initialize_population()

    best_sol = None

    best_fit = float('inf')

    for gen in range(GENERATIONS):

        fitness = evaluate_fitness(pop)

        min_idx = np.argmin(fitness)

        if fitness[min_idx] < best_fit:

            best_fit = fitness[min_idx]

            best_sol = pop[min_idx].copy()

        print(f"Generation {gen}: Best Fitness = {best_fit:.4f}")

        selected = select(pop, fitness)

        offspring = crossover(selected)

        mutated = mutate(offspring)

        pop = mutated

    return best_sol, best_fit


# Run it

best, fitness = gene_expression_algorithm()

print("\nBest Solution:", best)

print("Best Fitness:", fitness)
